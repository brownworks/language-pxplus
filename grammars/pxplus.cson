# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.pxplus' # pxplus should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'PxPlus' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'pvx'
  'pvc'
  'pvt'
  'pvs'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [
  {
    include: '#comments'
  }
  {
    include: '#entities'
  }
  {
    include: '#keywords'
  }
  {
    include: '#strings'
  }
  {
    include: '#numerics'
  }
  {
    include: '#supports'
  }
  {
    include: '#variables'
  }
]

repository: {
  comments: {
    patterns: [
      {
        begin: '\\!'
        beginCaptures: {
          0: {
            name: 'punctuation.definition.comment.pxplus'
          }
        }
        end: '\\n'
        name: 'comment.line.pxplus'
      }
      {
        begin: '(?i:REM)\\s'
        beginCaptures: {
          0: {
            name: 'punctuation.definition.comment.pxplus'
          }
        }
        end: '\\n'
        name: 'comment.line.pxplus'
      }
    ]
  }
  entities: {
    patterns: [
      {
        captures: {
          1: {
            name: 'storage.type.class.pxplus'
          }
          2: {
            name: 'entity.name.class.pxplus'
          }
        }
        match: '^[\\t ]*((?i:DEF\\sCLASS))[\\t ]+\"([A-Za-z_][A-Za-z0-9_]*)*\"'
        name: 'meta.class.pxplus'
      }
      {
        captures: {
          1: {
            name: 'keyword.other.pxplus'
          }
          2: {
            name: 'entity.name.class.pxplus'
          }
        }
        match: '^[\\t ]*((?i:LIKE))[\\t ]+\"([A-Za-z_][A-Za-z0-9_]*)*\"'
        name: 'meta.class.inheritance.pxplus'
      }
      {
        captures: {
          1: {
            name: 'storage.type.property.pxplus'
          }
          2: {
            name: 'variable.other.object.pxplus'
          }
        }
        match: '^[\\t ]*((?i:PROPERTY(?i:\\s+HIDE|)))[\\t ]+([A-Za-z_][A-Za-z0-9_]*)[\\t ]*(?=(?i:OBJECT))'
      }
      {
        captures: {
          1: {
            name: 'storage.type.property.pxplus'
          }
          2: {
            name: 'variable.other.member.pxplus'
          }
        }
        match: '^[\\t ]*((?i:PROPERTY(?i:\\s+HIDE|)))[\\t ]+([A-Za-z_][A-Za-z0-9_$]*)[\\t ]*'
      }
      {
        match: '(?<=(GET|get)\\s)[\\t ]*([A-Za-z_][A-Za-z0-9_]*)[\\s$]'
        name: 'entity.name.section.pxplus'
      }
      {
        match: '^[\\t ]*([A-Za-z_][A-Za-z0-9_]*)(?=\\:[\\s$])'
        name: 'entity.name.section.pxplus'
      }
      {
        captures: {
          1: {
            name: 'storage.type.function.pxplus'
          }
          2: {
            name: 'entity.name.function.pxplus'
          }
          3: {
            name: 'variable.parameter.function.pxplus'
          }
          4: {
            name: 'entity.name.section.pxplus'
          }
        }
        match: '^[\\t ]*((?i:FUNCTION(?i:\\s+HIDE|\\s+LOCAL|\\s+PERFORM|)))[\\t ]+([A-Za-z_][A-Za-z0-9_$]*)[\\(\\t ](.*)[\\)][\\t ]*([A-Za-z_][A-Za-z0-9_]*|)'
        name: 'meta.function.pxplus'
      }
      {
        captures: {
          1: {
            name: 'storage.type.function.pxplus'
          }
          2: {
            name: 'entity.name.function.pxplus'
          }
          3: {
            name: 'variable.parameter.function.pxplus'
          }
        }
        match: '^[\\t ]*((?i:FUNCTION(?i:\\s+HIDE|\\s+LOCAL|\\s+PERFORM|)))[\\t ]+([A-Za-z_][A-Za-z0-9_$]*)[\\(\\t ](.*)[\\)][\\t ]*[\\s\\=]'
        name: 'meta.function.pxplus'
      }
      {
        captures: {
          1: {
            name: 'storage.type.object.pxplus'
          }
          2: {
            name: 'variable.other.object.pxplus'
          }
        }
        match: '^[\\t ]*((?i:LOCAL))[\\t ]+([A-Za-z_][A-Za-z0-9_]*)[\\t ]+(?=(?i:OBJECT))'
      }
      {
        captures: {
          1: {
            name: 'variable.other.object.pxplus'
          }
          2: {
            name: 'keyword.operator.pxplus'
          }
          3: {
            name: 'support.function.builtin.pxplus'
          }
          4: {
            name: 'entity.name.class.pxplus'
          }
        }
        match: '\\b([A-Za-z_][A-Za-z0-9_]*)\\b[\\t ]*(=)[\\t ]*((?:NEW))[\\t ]*\\(\"([A-Za-z_][A-Za-z0-9_]*)*\"'
      }
      {
        captures: {
          1: {
            name: 'punctuation.definition.function.pxplus'
          }
          2: {
            name: 'entity.name.function.pxplus'
          }
        }
        match: '(\.\'|\')([A-Za-z_][A-Za-z0-9_$]*)(?=\\()'
      }
      {
        name: 'entity.name.function.pxplus'
        match: '\\b(FN|fn)[%]*[A-Za-z_][A-Za-z0-9_$]*(?=\\()'
      }
    ]
  }
  keywords: {
    patterns: [
      {
        name: 'keyword.operator.pxplus'
        match: '\\b(?i:(AND|OR))\\b'
      }
      {
        name: 'keyword.control.conditional.pxplus'
        match: '\\b(?i:(IF|THEN|ELSE|WHERE))\\b'
      }
      {
        name: 'keyword.control.exception.pxplus'
        match: '\\b(?i:(CATCH|END_TRY|FINALLY|TRY|ERROR_HANDLER))\\b'
      }
      {
        name: 'keyword.control.exception.pxplus'
        match: '\\*(?i:(BREAK|CONTINUE|NEXT|PROCEED))'
      }
      {
        name: 'keyword.control.repeat.pxplus'
        match: '\\b(?i:(FOR|REPEAT|WHILE|NEXT|UNTIL|WEND))\\b'
      }
      {
        name: 'keyword.control.pxplus'
        match: '\\b(?i:(BREAK|CALL|CASE|CONTINUE|CREATE REQUIRED|DEFAULT|DELETE REQUIRED|GOSUB|GET|NEXT|SET ERR|SWITCH))\\b'
      }
      {
        name: 'keyword.other.pxplus'
        match: '\\b(?i:(ADDR|BEGIN|CLOSE|DELETE|DIM|DROP|END DEF|END|ENTER|EXIT ERR|EXIT|FIND|FROM|IOLIST|LOCAL|OBJECT|OPEN|READ DATA FROM|READ|RECORD|REMOVE|RETURN|SELECT KEY|SELECT|STATIC|TO|WRITE))\\b'
      }
      {
        name: 'keyword.other.option.pxplus'
        match: '\\b(?i:(BSY|DOM|ERR|IOL|KEY|KNO|REC))(?=[\\t ]*=)\\b'
      }
      {
        name: 'keyword.operator.comparison.pxplus'
        match: '(<\\=|>\\=|<|>|\\=)'
      }
      {
        name: 'keyword.operator.arithmetic.pxplus'
        match: '(\\+\\=|\\-\\=|\\*\\=|\\/\\=|\\=|\\+|\\-|\\/|\\*)'
      }
    ]
  }
  strings: {
    patterns: [
      {
        name: 'string.quoted.double.pxplus'
        begin: '\"'
        end: '\"'
      }
      {
        name: 'constant.character.pxplus'
        match: '\\$[0-9A-Fa-f]*\\$'
      }
    ]
  }
  numerics: {
    patterns: [
      {
        name: 'constant.numeric.pxplus'
        match: '\\b(?<!\\$)([0-9.]+)(?!\\$)\\b'
      }
    ]
  }
  supports: {
    patterns: [
      {
        name: 'support.variable.builtin.pxplus'
        match: '\\b(?i:(_OBJ|BKG|CHN|HFN|LFO|UNT))(?![\\($])\\b'
      }
      {
        name: 'support.variable.builtin.pxplus'
        match: '\\b(?i:_CLASS\\$)'
      }
      {
        name: 'support.function.builtin.pxplus'
        match: '\\b(?i:(ARG|CPL|CVS|DIM|EVN|EVS|FID|IOL|LCS|LEN|LST|MAX|MID|MIN|MSG|NOT|NUL|NUM|PAD|POS|REC|REF|STP|STR|SUB|TBL|TCB|UCS|VIN|VIS))(?=\\()\\b'
      }
    ]
  }
  variables: {
    patterns: [
      {
        name: 'variable.other.object.pxplus'
        match: '([A-Za-z_][A-Za-z0-9_]*)(?=\')'
      }
      {
        captures: {
          1: {
            name: 'punctuation.definition.member.pxplus'
          }
          2: {
            name: 'variable.other.member.pxplus'
          }
        }
        match: '(\')([A-Za-z_][A-Za-z0-9_$]*)'
      }
      {
        captures: {
          1: {
            name: 'punctuation.definition.global.pxplus'
          }
          2: {
            name: 'variable.other.global.pxplus'
          }
        }
        match: '(?<!FN|fn)(%)([A-Za-z_][A-Za-z0-9_$]*)'
        name: 'meta.variable.pxplus'
      }
    ]
  }
}
